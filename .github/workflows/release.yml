name: Deploy to ArgoCD

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: self-hosted

    permissions:
      contents: write
      packages: read

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest image by timestamp
        id: get_tag
        run: |
          # Get the package name (just the repo name, not full path)
          PACKAGE_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          echo "Looking for container package: ${PACKAGE_NAME}"
          
          # Query GitHub Container Registry API for package versions with correct headers
          API_RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions")
          
          echo "API Response: ${API_RESPONSE}"
          
          # Check if response is an array (successful) or contains error
          if echo "${API_RESPONSE}" | jq -e '. | type == "array"' > /dev/null 2>&1; then
            # Sort by created_at timestamp and get the first tag from the latest version
            LATEST_VERSION=$(echo "${API_RESPONSE}" | \
              jq -r 'sort_by(.created_at) | reverse | .[0] | 
              if .metadata.container.tags | length > 0 then 
                .metadata.container.tags[0] 
              else 
                .name 
              end')
          
            if [ "$LATEST_VERSION" != "null" ] && [ -n "$LATEST_VERSION" ]; then
              IMAGE_TAG="$LATEST_VERSION"
              echo "Found latest image tag: ${IMAGE_TAG}"
            else
              echo "ERROR: No valid tags found in the latest package version"
              exit 1
            fi
          else
            echo "ERROR: Failed to get package versions from GitHub API"
            echo "API Response: ${API_RESPONSE}"
            exit 1
          fi
          
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT
          echo "Final image to deploy: ${FULL_IMAGE}"

      - name: Pull latest image
        run: |
          docker pull ${{ steps.get_tag.outputs.full_image }}
          echo "Successfully pulled image: ${{ steps.get_tag.outputs.full_image }}"

      - name: Checkout ArgoCD state repository
        uses: actions/checkout@v4
        with:
          repository: venkatreddy9640/argocd-state-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: argo-repo

      - name: Update Kubernetes manifests
        run: |
          # Get project name from repository name
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Update the image placeholder in your K8s manifests
          sed -i "s#IMAGE_PLACEHOLDER#${{ steps.get_tag.outputs.full_image }}#g" argo-repo/${PROJECT_NAME}/k8s/deployment.yaml
          
          echo "Updated image to: ${{ steps.get_tag.outputs.full_image }}"
          
          # Show the changes
          cd argo-repo
          git diff ${PROJECT_NAME}/k8s/deployment.yaml

      - name: Commit and push changes to ArgoCD repo
        run: |
          cd argo-repo
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add ${PROJECT_NAME}/k8s/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Deploy ${PROJECT_NAME} image: ${{ steps.get_tag.outputs.image_tag }}"
            git push
          fi