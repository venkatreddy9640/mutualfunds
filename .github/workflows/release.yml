name: Deploy to ArgoCD

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: read

    steps:
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest image by timestamp
        id: get_tag
        run: |
          # Get the package name (just the repo name, not full path)
          PACKAGE_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          echo "=========================================="
          echo "🔍 DEBUG: GitHub Container Registry API Call"
          echo "=========================================="
          echo "🔍 PACKAGE_NAME: ${PACKAGE_NAME}"
          echo "🔍 FULL REPO: ${{ github.repository }}"
          echo "🔍 API URL: https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions"
          
          # Query GitHub Container Registry API for package versions with correct headers
          echo "🚀 Making API call to GitHub Container Registry..."
          API_RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/user/packages/container/${PACKAGE_NAME}/versions")
          
          echo "📄 DEBUG: Raw API Response (first 500 chars):"
          echo "${API_RESPONSE}" | head -c 500
          echo ""
          echo "..."
          
          # Check if response is an array (successful) or contains error
          if echo "${API_RESPONSE}" | jq -e '. | type == "array"' > /dev/null 2>&1; then
            echo "✅ API returned valid array of package versions"
          
            echo "📊 DEBUG: Number of versions found:"
            echo "${API_RESPONSE}" | jq '. | length'
          
            echo "📊 DEBUG: All available versions with timestamps:"
            echo "${API_RESPONSE}" | jq '.[] | {created_at, tags: .metadata.container.tags}'
          
            # Sort by created_at timestamp and get the first tag from the latest version
            LATEST_VERSION=$(echo "${API_RESPONSE}" | \
              jq -r 'sort_by(.created_at) | reverse | .[0] | 
              if .metadata.container.tags | length > 0 then 
                .metadata.container.tags[0] 
              else 
                .name 
              end')
          
            if [ "$LATEST_VERSION" != "null" ] && [ -n "$LATEST_VERSION" ]; then
              IMAGE_TAG="$LATEST_VERSION"
              echo "✅ Found latest image tag: ${IMAGE_TAG}"
            else
              echo "❌ ERROR: No valid tags found in the latest package version"
              echo "🔍 Latest version details:"
              echo "${API_RESPONSE}" | jq 'sort_by(.created_at) | reverse | .[0]'
              exit 1
            fi
          else
            echo "❌ ERROR: API response is not a valid array"
            echo "🔍 Full API Response:"
            echo "${API_RESPONSE}"
          
            # Check if it's an authentication error
            if echo "${API_RESPONSE}" | grep -q "403\|Forbidden\|authentication"; then
              echo "❌ Permission/Authentication error detected!"
              echo "💡 Troubleshooting tips:"
              echo "   1. Check if GITHUB_TOKEN has 'packages:read' permission"
              echo "   2. Verify package visibility settings"
              echo "   3. Check if 'Inherit access from source repository' is enabled"
            fi
          
            exit 1
          fi
          
          FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
          
          echo "=========================================="
          echo "✅ FINAL RESULTS:"
          echo "   IMAGE_TAG: ${IMAGE_TAG}"
          echo "   FULL_IMAGE: ${FULL_IMAGE}"
          echo "=========================================="
          
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${FULL_IMAGE}" >> $GITHUB_OUTPUT

      - name: Pull latest image
        run: |
          docker pull ${{ steps.get_tag.outputs.full_image }}
          echo "Successfully pulled image: ${{ steps.get_tag.outputs.full_image }}"

      - name: Checkout ArgoCD state repository
        uses: actions/checkout@v4
        with:
          repository: venkatreddy9640/argocd-state-repo
          token: ${{ secrets.GITHUB_TOKEN }}
          path: argo-repo

      - name: Update Kubernetes manifests
        run: |
          # Get project name from repository name
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          echo "=========================================="
          echo "🔍 DEBUG: PROJECT_NAME = ${PROJECT_NAME}"
          echo "🔍 DEBUG: TARGET IMAGE = ${{ steps.get_tag.outputs.full_image }}"
          echo "=========================================="
          
          echo "📁 DEBUG: Repository structure:"
          find argo-repo -name "*.yml" -o -name "*.yaml" | head -10
          
          echo "📄 DEBUG: Checking if deployment file exists:"
          ls -la argo-repo/${PROJECT_NAME}/k8s/ || echo "❌ Directory not found!"
          
          if [ -f "argo-repo/${PROJECT_NAME}/k8s/deployment.yml" ]; then
            echo "✅ deployment.yml found!"
          
            echo "📝 DEBUG: Current deployment.yml content (image lines only):"
            grep -n -i "image" argo-repo/${PROJECT_NAME}/k8s/deployment.yml || echo "No image lines found"
          
            echo "🔍 DEBUG: Looking for IMAGE_PLACEHOLDER:"
            grep -n "IMAGE_PLACEHOLDER" argo-repo/${PROJECT_NAME}/k8s/deployment.yml || echo "❌ IMAGE_PLACEHOLDER not found!"
          
            echo "🔍 DEBUG: Looking for ghcr.io images:"
            grep -n "ghcr.io" argo-repo/${PROJECT_NAME}/k8s/deployment.yml || echo "❌ No ghcr.io images found!"
          
            echo "🔧 DEBUG: File before sed replacement:"
            cat argo-repo/${PROJECT_NAME}/k8s/deployment.yml
          
            echo "🚀 DEBUG: Running sed replacement..."
            # Try multiple sed patterns to catch different scenarios
          
            # Pattern 1: Replace IMAGE_PLACEHOLDER
            if grep -q "IMAGE_PLACEHOLDER" argo-repo/${PROJECT_NAME}/k8s/deployment.yml; then
              echo "✅ Found IMAGE_PLACEHOLDER, replacing..."
              sed -i "s#IMAGE_PLACEHOLDER#${{ steps.get_tag.outputs.full_image }}#g" argo-repo/${PROJECT_NAME}/k8s/deployment.yml
            fi
          
            # Pattern 2: Replace any existing ghcr.io image
            if grep -q "ghcr.io/venkatreddy9640/mutualfunds:" argo-repo/${PROJECT_NAME}/k8s/deployment.yml; then
              echo "✅ Found existing ghcr.io image, replacing..."
              sed -i "s#ghcr.io/venkatreddy9640/mutualfunds:.*#${{ steps.get_tag.outputs.full_image }}#g" argo-repo/${PROJECT_NAME}/k8s/deployment.yml
            fi
          
            # Pattern 3: Replace any image line containing mutualfunds
            if grep -q "mutualfunds:" argo-repo/${PROJECT_NAME}/k8s/deployment.yml; then
              echo "✅ Found mutualfunds image, replacing..."
              sed -i "s#.*mutualfunds:.*#        image: ${{ steps.get_tag.outputs.full_image }}#g" argo-repo/${PROJECT_NAME}/k8s/deployment.yml
            fi
          
            echo "🔧 DEBUG: File after sed replacement:"
            cat argo-repo/${PROJECT_NAME}/k8s/deployment.yml
          
            echo "📊 DEBUG: Checking git status:"
            cd argo-repo
            git status
          
            echo "📊 DEBUG: Checking git diff:"
            git diff ${PROJECT_NAME}/k8s/deployment.yml
          
            echo "📊 DEBUG: Checking if there are staged changes:"
            git add ${PROJECT_NAME}/k8s/deployment.yml
            git diff --staged
          
            if git diff --staged --quiet; then
              echo "❌ No staged changes detected!"
              echo "🔍 Let's check what git thinks changed:"
              git diff --name-only
              git diff --stat
            else
              echo "✅ Changes detected in staged files!"
            fi
          else
            echo "❌ deployment.yml not found!"
            echo "📁 Available files:"
            find argo-repo -name "*.yml" -o -name "*.yaml"
          fi

      - name: Commit and push changes to ArgoCD repo
        run: |
          cd argo-repo
          PROJECT_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          echo "=========================================="
          echo "🔧 DEBUG: Git commit and push process"
          echo "=========================================="
          
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "📊 DEBUG: Current git status:"
          git status
          
          echo "📊 DEBUG: Files in staging area:"
          git diff --cached --name-only || echo "No files in staging area"
          
          echo "📊 DEBUG: All changes (staged and unstaged):"
          git diff --name-only HEAD || echo "No changes detected"
          
          echo "📊 DEBUG: Detailed diff:"
          git diff HEAD
          
          echo "🚀 DEBUG: Adding all changes to staging..."
          git add ${PROJECT_NAME}/k8s/
          
          echo "📊 DEBUG: Files after git add:"
          git diff --cached --name-only
          
          echo "📊 DEBUG: Detailed staged changes:"
          git diff --cached
          
          if git diff --staged --quiet; then
            echo "❌ No changes to commit (staging area is clean)"
            echo "🔍 Let's investigate why:"
            echo "   - Working directory status:"
            git status --porcelain
            echo "   - Checking if file was actually modified:"
            git diff --name-only
            echo "   - File timestamps:"
            ls -la ${PROJECT_NAME}/k8s/deployment.yml
            echo "   - File content hash:"
            sha256sum ${PROJECT_NAME}/k8s/deployment.yml || md5sum ${PROJECT_NAME}/k8s/deployment.yml
          else
            echo "✅ Changes detected! Committing..."
            git commit -m "Deploy ${PROJECT_NAME} image: ${{ steps.get_tag.outputs.image_tag }}"
          
            echo "🚀 Pushing changes..."
            git push
          
            echo "✅ Successfully pushed changes to ArgoCD repo!"
          fi